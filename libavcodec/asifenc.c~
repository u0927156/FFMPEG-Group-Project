/*
 * This is a decoder for the asif file format
 *
 * Created as a student project for CS 3505 Spring 2020 at the University of Utah
 * 
 * Authors: Spencer Durrant, Spencer Peterson
 * Version: 1 - March 18, 2020
 */

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include <libavcode/avcodec.h>

#include <libavutil/channel_layout.h>
#include <libavutil/common.h>
#include <libavutil/frame.h>
#include <libavutil/samplefmt.h> 




static int check_sample_fmt(const AVCodec *codec, enum AVSAmpleFormat sample_fmt)
{
  const enum AVSampleFormat *p = codec->sample_fmts;
  
  while (*p != AV_SAMPLE_FMT_NONE) {
    if (*p == sample_fmt)
      return 1;
    p++;
  }

  return 0;
}

/* just pick the highest supported samplerate */
static int select_sample_rate(const AVCodec *codec)
{
  const int *p;
  int best_samplerate = 0;
  if (!codec->supported_samplerates)
    return 44100;
  p = codec->supported_samplerates;
  while (*p) {
    if (!best_samplerate || abs(44100 - *p) < abs(44100 - best_samplerate))
      best_samplerate = *p;
    p++;
  }
  return best_samplerate;
}

/* select layout with the highest channel count */
static int select_channel_layout(const AVCodec *codec)
{
  const uint64_t *p;
  uint64_t best_ch_layout = 0;
  int best_nb_channels   = 0;
  if (!codec->channel_layouts)
    return AV_CH_LAYOUT_STEREO;
  p = codec->channel_layouts;
  while (*p) {
    int nb_channels = av_get_channel_layout_nb_channels(*p);
    if (nb_channels > best_nb_channels) {
      best_ch_layout    = *p;
      best_nb_channels = nb_channels;
    }
    p++;
  }
  return best_ch_layout;
}


static void encode(AVCodecContext *ctx, AVFrame *frame, AVPacket *pkt,
                   FILE *output)
{
  int ret;
  /* send the frame for encoding */
  ret = avcodec_send_frame(ctx, frame);
  if (ret < 0) {
    fprintf(stderr, "Error sending the frame to the encoder\n");
    exit(1);
  }
  /* read all the available output packets (in general there may be any
   * number of them */
  while (ret >= 0) {
    ret = avcodec_receive_packet(ctx, pkt);
    if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)
      return;
    else if (ret < 0) {
      fprintf(stderr, "Error encoding audio frame\n");
      exit(1);
    }
    fwrite(pkt->data, 1, pkt->size, output);
    av_packet_unref(pkt);
  }
}
